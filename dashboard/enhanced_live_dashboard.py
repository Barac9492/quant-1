#!/usr/bin/env python3
"""
Enhanced Live Dashboard with Target Asset Predictor and Adaptive Early Signals
Built with 20+ years quant experience
"""

import streamlit as st
import pandas as pd
import numpy as np
import plotly.graph_objects as go
import plotly.express as px
from plotly.subplots import make_subplots
import sys
import os
from datetime import datetime

# Add parent directory to path
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from data_pipeline.alternative_fetcher import AlternativeDataFetcher, generate_real_insights
from strategies.adaptive_early_signals import AdaptiveEarlySignalEngine
from strategies.target_asset_predictor import TargetAssetPredictor

# Page configuration
st.set_page_config(
    page_title="üß† AI Quant Signal Engine",
    page_icon="üöÄ",
    layout="wide",
    initial_sidebar_state="expanded"
)

@st.cache_data(ttl=300)  # Cache for 5 minutes
def load_live_data():
    """Load real market data with caching"""
    fetcher = AlternativeDataFetcher()
    return fetcher.fetch_multiple_sources()

@st.cache_data(ttl=300)
def run_adaptive_analysis(data_hash):
    """Run adaptive early signal analysis with caching"""
    fetcher = AlternativeDataFetcher()
    data = fetcher.fetch_multiple_sources()
    
    engine = AdaptiveEarlySignalEngine()
    adaptive_signals = engine.detect_adaptive_signals(data)
    
    insights = generate_real_insights(data)
    
    return adaptive_signals, insights, data

@st.cache_data(ttl=300)
def run_target_analysis(target_asset, data_hash):
    """Run target asset analysis with caching"""
    fetcher = AlternativeDataFetcher()
    data = fetcher.fetch_multiple_sources()
    
    predictor = TargetAssetPredictor()
    return predictor.find_early_indicators(target_asset, data)

def main():
    st.title("üß† AI Quant Signal Engine")
    st.markdown("### üöÄ Professional-Grade Early Signal Detection & Target Asset Analysis")
    
    # Load data
    with st.spinner("üîÑ Loading real-time market data..."):
        data = load_live_data()
    
    if data.empty:
        st.error("‚ùå Unable to fetch real market data. Please check your connection.")
        st.stop()
    
    # Generate data hash for caching
    data_hash = hash(str(data.values.tobytes()))
    
    # Run comprehensive analysis
    with st.spinner("üß† Running AI analysis..."):
        adaptive_signals, insights, data = run_adaptive_analysis(data_hash)
    
    # Header metrics
    st.markdown("---")
    col1, col2, col3, col4, col5 = st.columns(5)
    
    regime = adaptive_signals.get('market_regime', {})
    stability = adaptive_signals.get('correlation_stability', {})
    execution_priority = adaptive_signals.get('execution_priority', [])
    
    with col1:\n        regime_emoji = {'crisis': 'üö®', 'stress': 'üî¥', 'normal': 'üü°', 'complacency': 'üò¥'}[regime.get('regime_type', 'normal')]\n        st.metric(\n            \"Market Regime\",\n            f\"{regime_emoji} {regime.get('regime_type', 'unknown').title()}\",\n            delta=f\"{regime.get('confidence', 'LOW')} confidence\"\n        )\n    \n    with col2:\n        st.metric(\n            \"Correlation Stability\",\n            f\"{stability.get('stability_score', 0.5):.2f}\",\n            delta=f\"Regime shift risk: {stability.get('regime_shift_probability', 0.5):.1%}\"\n        )\n    \n    with col3:\n        priority_count = len([x for x in execution_priority if x.get('priority_rank', 5) <= 2])\n        st.metric(\n            \"üö® High Priority Signals\",\n            priority_count,\n            delta=\"Critical actions needed\" if priority_count > 0 else \"All clear\"\n        )\n    \n    with col4:\n        avg_vol = regime.get('avg_volatility', 0.15)\n        vol_status = \"High\" if avg_vol > 0.25 else \"Normal\" if avg_vol > 0.15 else \"Low\"\n        st.metric(\n            \"Market Volatility\",\n            f\"{avg_vol:.1%}\",\n            delta=f\"{vol_status} regime\"\n        )\n    \n    with col5:\n        last_update = data.index[-1].strftime(\"%m/%d %H:%M\")\n        st.metric(\n            \"üîÑ Data Status\",\n            \"Live\",\n            delta=f\"Updated {last_update}\"\n        )\n    \n    st.markdown(\"---\")\n    \n    # Main tabs\n    tab1, tab2, tab3, tab4, tab5 = st.tabs([\"üéØ Target Asset Analyzer\", \"üß† Adaptive Signals\", \"‚ö° Execution Priority\", \"üìä Market Insights\", \"üîß Advanced Settings\"])\n    \n    with tab1:\n        st.subheader(\"üéØ Target Asset Early Signal Finder\")\n        st.markdown(\"**Enter any ticker to find the best early indicators for trading that specific asset**\")\n        \n        # Asset selection\n        col1, col2 = st.columns([2, 1])\n        \n        with col1:\n            available_assets = list(data.columns)\n            selected_target = st.selectbox(\n                \"Select Target Asset to Analyze:\",\n                available_assets,\n                index=available_assets.index('AAPL') if 'AAPL' in available_assets else 0\n            )\n        \n        with col2:\n            min_correlation = st.slider(\"Minimum Correlation Threshold\", 0.1, 0.8, 0.3, 0.05)\n            max_lead_days = st.slider(\"Maximum Lead Time (days)\", 1, 30, 15)\n        \n        if st.button(\"üîç Find Early Indicators\", type=\"primary\"):\n            with st.spinner(f\"Analyzing early indicators for {selected_target}...\"):\n                target_results = run_target_analysis(selected_target, data_hash)\n            \n            if 'error' in target_results:\n                st.error(f\"‚ùå {target_results['error']}\")\n            else:\n                # Display results\n                indicators = target_results.get('leading_indicators', [])\n                \n                if indicators:\n                    st.success(f\"üöÄ Found {len(indicators)} reliable early indicators for {selected_target}\")\n                    \n                    # Top indicators table\n                    st.subheader(\"üìä Top Early Indicators\")\n                    \n                    indicator_data = []\n                    for i, ind in enumerate(indicators[:5], 1):\n                        lead_time = f\"{ind['optimal_lag']}d\" if ind['optimal_lag'] > 0 else \"Concurrent\"\n                        direction_emoji = \"üìà\" if ind['direction'] == 'positive' else \"üìâ\"\n                        \n                        indicator_data.append({\n                            'Rank': i,\n                            'Indicator': f\"{direction_emoji} {ind['indicator']}\",\n                            'Lead Time': lead_time,\n                            'Correlation': f\"{ind['correlation']:+.3f}\",\n                            'Strength': ind['relationship_strength'].title(),\n                            'Stability': f\"{ind['stability_score']:.2f}\",\n                            'Predictive Score': f\"{ind['predictive_score']:.3f}\",\n                            'Significance': ind['significance']\n                        })\n                    \n                    indicator_df = pd.DataFrame(indicator_data)\n                    st.dataframe(indicator_df, use_container_width=True)\n                    \n                    # Current predictions\n                    predictions = target_results.get('prediction_signals', [])\n                    if predictions:\n                        st.subheader(f\"üîÆ Current Predictions for {selected_target}\")\n                        \n                        for pred in predictions[:3]:\n                            confidence_color = \"success\" if pred['confidence'] == 'HIGH' else \"warning\"\n                            direction_emoji = \"üöÄ\" if pred['predicted_direction'] == 'up' else \"üí•\"\n                            \n                            with st.container():\n                                st.markdown(f\"**{pred['indicator']} Signal:**\")\n                                col1, col2, col3 = st.columns(3)\n                                \n                                with col1:\n                                    st.metric(\"Recent Move\", f\"{pred['indicator_move']:+.2f}%\")\n                                \n                                with col2:\n                                    st.metric(\"Prediction\", f\"{direction_emoji} {pred['predicted_direction'].upper()}\")\n                                \n                                with col3:\n                                    st.metric(\"Timeframe\", pred['expected_timeframe'])\n                                \n                                if pred['confidence'] == 'HIGH':\n                                    st.success(f\"üî• HIGH CONFIDENCE: {pred['indicator']} suggests {selected_target} likely to move {pred['predicted_direction']}\")\n                                else:\n                                    st.info(f\"‚ö° MEDIUM CONFIDENCE: Watch {pred['indicator']} for {selected_target} direction\")\n                                \n                                st.markdown(\"---\")\n                    \n                    # Trading recommendations\n                    recommendations = target_results.get('trading_recommendations', {})\n                    if recommendations.get('primary_indicators_to_watch'):\n                        st.subheader(\"üí° Trading Recommendations\")\n                        \n                        st.markdown(\"**Primary Indicators to Monitor:**\")\n                        for rec in recommendations['primary_indicators_to_watch']:\n                            st.markdown(f\"‚Ä¢ **{rec['indicator']}** - {rec['relationship']} relationship, {rec['reliability']} reliability (leads by {rec['lead_time']})\")\n                        \n                        if recommendations.get('entry_signals'):\n                            st.markdown(\"**Current Entry Signals:**\")\n                            for signal in recommendations['entry_signals']:\n                                st.markdown(f\"‚Ä¢ {signal['signal']} ({signal['confidence']} confidence)\")\n                    \n                    # Risk warnings\n                    warnings = target_results.get('risk_warnings', [])\n                    if warnings:\n                        st.subheader(\"‚ö†Ô∏è Risk Warnings\")\n                        for warning in warnings:\n                            st.warning(warning)\n                    \n                else:\n                    st.warning(f\"No strong early indicators found for {selected_target} with current thresholds. Try lowering the correlation threshold.\")\n    \n    with tab2:\n        st.subheader(\"üß† Adaptive Early Signal Detection\")\n        st.markdown(\"**Advanced correlation-based signals accounting for regime changes and non-stationarity**\")\n        \n        # Market regime analysis\n        col1, col2 = st.columns(2)\n        \n        with col1:\n            st.markdown(\"### üéØ Current Market Regime\")\n            regime_info = f\"\"\"\n            **Regime Type:** {regime.get('regime_type', 'unknown').title()} {regime_emoji}\n            **Average Correlation:** {regime.get('avg_correlation', 0):.3f}\n            **Volatility Level:** {regime.get('avg_volatility', 0):.1%}\n            **Momentum:** {regime.get('avg_momentum', 0):.1%}\n            **Regime Persistence:** {regime.get('regime_persistence', 0):.1%}\n            **Confidence:** {regime.get('confidence', 'LOW')}\n            \"\"\"\n            st.markdown(regime_info)\n        \n        with col2:\n            st.markdown(\"### üìä Correlation Stability\")\n            stability_info = f\"\"\"\n            **Stability Score:** {stability.get('stability_score', 0.5):.3f}\n            **Regime Shift Risk:** {stability.get('regime_shift_probability', 0.5):.1%}\n            **Status:** {stability.get('interpretation', 'Unknown')}\n            \"\"\"\n            st.markdown(stability_info)\n        \n        # Correlation breaks\n        correlation_breaks = stability.get('correlation_breaks', [])\n        if correlation_breaks:\n            st.markdown(\"### üö® Recent Correlation Breaks\")\n            \n            break_data = []\n            for brk in correlation_breaks[:5]:\n                break_data.append({\n                    'Asset Pair': brk['assets'],\n                    'Break Direction': brk['direction'].title(),\n                    'Magnitude': f\"{brk['break_magnitude']:.3f}\",\n                    'Current (15d)': f\"{brk['short_term_corr']:.3f}\",\n                    'Previous (45d)': f\"{brk['medium_term_corr']:.3f}\",\n                    'Significance': brk['significance']\n                })\n            \n            if break_data:\n                break_df = pd.DataFrame(break_data)\n                st.dataframe(break_df, use_container_width=True)\n        \n        # Regime-adjusted signals\n        regime_signals = adaptive_signals.get('regime_adjusted_signals', [])\n        if regime_signals:\n            st.markdown(\"### üéØ Regime-Adjusted Signals\")\n            \n            for i, signal in enumerate(regime_signals[:5], 1):\n                signal_type_emoji = \"üî¥\" if signal['signal_type'] == 'CORRELATION_SURGE' else \"üü¢\"\n                \n                with st.expander(f\"{signal_type_emoji} {signal['signal_type']}: {signal['assets']}\", expanded=i<=2):\n                    col1, col2, col3 = st.columns(3)\n                    \n                    with col1:\n                        st.metric(\"Correlation Change\", f\"{signal['correlation_change']:+.3f}\")\n                    \n                    with col2:\n                        st.metric(\"Signal Strength\", f\"{signal['signal_strength']:.3f}\")\n                    \n                    with col3:\n                        st.metric(\"Expected Lead\", f\"{signal['expected_lead_days']} days\")\n                    \n                    st.markdown(f\"**Implication:** {signal['implication']}\")\n                    st.markdown(f\"**Action:** {signal['action']}\")\n                    st.markdown(f\"**Confidence:** {signal['confidence']}\")\n        \n        # Portfolio impact\n        portfolio_impact = adaptive_signals.get('portfolio_impact_signals', [])\n        if portfolio_impact:\n            st.markdown(\"### üíº Portfolio Impact Analysis\")\n            \n            for impact in portfolio_impact:\n                priority_color = \"error\" if impact.get('priority') == 'CRITICAL' else \"warning\" if impact.get('priority') == 'HIGH' else \"info\"\n                \n                if priority_color == \"error\":\n                    st.error(f\"üö® **{impact['signal_type']}:** {impact['signal']}\")\n                elif priority_color == \"warning\":\n                    st.warning(f\"‚ö†Ô∏è **{impact['signal_type']}:** {impact['signal']}\")\n                else:\n                    st.info(f\"‚ÑπÔ∏è **{impact['signal_type']}:** {impact['signal']}\")\n                \n                st.markdown(f\"**Impact:** {impact['impact']}\")\n                st.markdown(f\"**Action:** {impact['action']}\")\n                st.markdown(\"---\")\n    \n    with tab3:\n        st.subheader(\"‚ö° Execution Priority List\")\n        st.markdown(\"**Prioritized actions based on signal strength, confidence, and urgency**\")\n        \n        execution_priority = adaptive_signals.get('execution_priority', [])\n        \n        if execution_priority:\n            for i, action in enumerate(execution_priority, 1):\n                urgency_emoji = {\n                    'IMMEDIATE': 'üö®',\n                    'HIGH': 'üî¥', \n                    'MEDIUM': 'üü°',\n                    'LOW': 'üü¢'\n                }[action['execution_urgency']]\n                \n                with st.container():\n                    col1, col2 = st.columns([3, 1])\n                    \n                    with col1:\n                        st.markdown(f\"### {i}. {urgency_emoji} {action['category']}\")\n                        st.markdown(f\"**Signal:** {action['signal']}\")\n                        st.markdown(f\"**Action:** {action['action']}\")\n                    \n                    with col2:\n                        st.metric(\"Timeframe\", action['timeframe'])\n                        st.metric(\"Confidence\", action['confidence'])\n                        st.metric(\"Urgency\", action['execution_urgency'])\n                    \n                    if action['execution_urgency'] in ['IMMEDIATE', 'HIGH']:\n                        st.error(f\"‚ö†Ô∏è **{action['execution_urgency']} PRIORITY** - Action required within {action['timeframe']}\")\n                    \n                    st.markdown(\"---\")\n        else:\n            st.success(\"‚úÖ No high-priority actions required at this time\")\n    \n    with tab4:\n        st.subheader(\"üìä Market Insights Dashboard\")\n        \n        # Use existing insights from the original dashboard\n        perf = insights[\"performance_insights\"]\n        vol = insights[\"volatility_insights\"]\n        corr = insights[\"correlation_insights\"]\n        actionable = insights[\"actionable_insights\"]\n        \n        # Performance overview\n        col1, col2, col3, col4 = st.columns(4)\n        \n        with col1:\n            st.metric(\"Best 1D Performer\", perf[\"best_1d\"][\"asset\"], f\"{perf['best_1d']['return']:+.2f}%\")\n        \n        with col2:\n            st.metric(\"Most Volatile Asset\", vol[\"most_volatile\"][\"asset\"], f\"{vol['most_volatile']['volatility']:.1f}%\")\n        \n        with col3:\n            st.metric(\"Average Correlation\", f\"{corr['average_correlation']:.3f}\")\n        \n        with col4:\n            st.metric(\"Market Diversification\", f\"{len([c for c in corr['strongest_positive'] if abs(c['correlation']) < 0.5]) / len(corr['strongest_positive']) * 100:.0f}%\")\n        \n        # Actionable insights\n        if actionable:\n            st.markdown(\"### üí° AI-Generated Market Insights\")\n            \n            for insight in actionable[:5]:\n                insight_type = insight[\"type\"]\n                message = insight[\"message\"]\n                action = insight[\"action\"]\n                \n                if insight_type in [\"BULL_MARKET\", \"MOMENTUM\"]:\n                    st.success(f\"**{insight_type}**: {message}\")\n                    st.info(f\"üí° **Action**: {action}\")\n                elif insight_type in [\"RISK_WARNING\", \"HIGH_VOLATILITY\", \"BEAR_MARKET\"]:\n                    st.error(f\"**{insight_type}**: {message}\")\n                    st.warning(f\"‚ö†Ô∏è **Action**: {action}\")\n                else:\n                    st.info(f\"**{insight_type}**: {message}\")\n                    st.success(f\"‚úÖ **Action**: {action}\")\n                \n                st.markdown(\"---\")\n        \n        # Correlation heatmap\n        st.subheader(\"üå°Ô∏è Real-Time Correlation Matrix\")\n        corr_matrix = data.corr()\n        \n        fig = px.imshow(\n            corr_matrix,\n            labels=dict(color=\"Correlation\"),\n            color_continuous_scale=\"RdBu_r\",\n            aspect=\"auto\",\n            zmin=-1, zmax=1\n        )\n        fig.update_layout(height=500)\n        st.plotly_chart(fig, use_container_width=True)\n    \n    with tab5:\n        st.subheader(\"üîß Advanced Settings\")\n        \n        col1, col2 = st.columns(2)\n        \n        with col1:\n            st.markdown(\"### ‚öôÔ∏è Analysis Parameters\")\n            \n            correlation_threshold = st.slider(\"Correlation Alert Threshold\", 0.3, 0.9, 0.7, 0.05)\n            volatility_threshold = st.slider(\"High Volatility Threshold\", 0.15, 0.50, 0.25, 0.05)\n            regime_persistence = st.slider(\"Regime Persistence Requirement\", 0.3, 0.9, 0.6, 0.1)\n            \n            st.markdown(\"### üìä Data Quality\")\n            st.metric(\"Data Points\", len(data))\n            st.metric(\"Assets Tracked\", len(data.columns))\n            st.metric(\"Date Range\", f\"{(data.index[-1] - data.index[0]).days} days\")\n        \n        with col2:\n            st.markdown(\"### üîÑ Refresh Settings\")\n            \n            refresh_interval = st.selectbox(\n                \"Auto Refresh Interval\",\n                [\"Manual Only\", \"5 minutes\", \"15 minutes\", \"30 minutes\"],\n                index=0\n            )\n            \n            if refresh_interval != \"Manual Only\":\n                st.info(f\"Page will refresh every {refresh_interval}\")\n                interval_map = {\"5 minutes\": 300, \"15 minutes\": 900, \"30 minutes\": 1800}\n                seconds = interval_map[refresh_interval]\n                \n                st.markdown(f\"\"\"\n                <script>\n                setTimeout(function(){{\n                    window.location.reload();\n                }}, {seconds * 1000});\n                </script>\n                \"\"\", unsafe_allow_html=True)\n            \n            if st.button(\"üîÑ Refresh Data Now\", type=\"primary\"):\n                st.cache_data.clear()\n                st.rerun()\n            \n            st.markdown(\"### üìà Asset Universe\")\n            st.write(\"Available assets:\")\n            st.write(\", \".join(data.columns))\n    \n    # Sidebar\n    with st.sidebar:\n        st.header(\"üß† AI Quant Engine\")\n        st.markdown(\"**Built with 20+ years quant experience**\")\n        \n        # Quick stats\n        st.markdown(\"---\")\n        st.subheader(\"üìä System Status\")\n        \n        regime_color = {\n            'crisis': 'üî¥',\n            'stress': 'üü°', \n            'normal': 'üü¢',\n            'complacency': 'üîµ'\n        }[regime.get('regime_type', 'normal')]\n        \n        st.markdown(f\"{regime_color} **Regime:** {regime.get('regime_type', 'unknown').title()}\")\n        st.markdown(f\"‚ö° **Volatility:** {regime.get('avg_volatility', 0):.1%}\")\n        st.markdown(f\"üîó **Avg Correlation:** {regime.get('avg_correlation', 0):.3f}\")\n        st.markdown(f\"üìä **Stability:** {stability.get('stability_score', 0.5):.2f}\")\n        \n        # Top priority actions\n        st.markdown(\"---\")\n        st.subheader(\"‚ö° Priority Actions\")\n        \n        priority_actions = [x for x in execution_priority if x.get('priority_rank', 5) <= 2][:3]\n        \n        if priority_actions:\n            for action in priority_actions:\n                urgency_emoji = {'IMMEDIATE': 'üö®', 'HIGH': 'üî¥', 'MEDIUM': 'üü°'}[action['execution_urgency']]\n                st.markdown(f\"{urgency_emoji} **{action['category']}**\")\n                st.markdown(f\"*{action['timeframe']}*\")\n                st.markdown(\"---\")\n        else:\n            st.success(\"‚úÖ All systems normal\")\n        \n        st.markdown(\"---\")\n        st.markdown(\"### üéØ Quick Analysis\")\n        if st.button(\"üîç Analyze Custom Asset\"):\n            st.info(\"Use the Target Asset Analyzer tab above\")\n        \n        st.markdown(\"### üìö Resources\")\n        st.markdown(\"‚Ä¢ Non-stationary correlations\")\n        st.markdown(\"‚Ä¢ Regime-dependent relationships\")\n        st.markdown(\"‚Ä¢ Time-varying lead-lag analysis\")\n        st.markdown(\"‚Ä¢ Multi-timeframe confirmation\")\n\nif __name__ == \"__main__\":\n    main()